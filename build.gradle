plugins {
  id 'application'
  id 'checkstyle'
  id 'pmd'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.0.13.RELEASE'
  id 'org.springframework.boot' version '2.3.12.RELEASE'
  id 'org.owasp.dependencycheck' version '6.5.3'
  id 'com.github.ben-manes.versions' version '0.42.0'
  id 'org.sonarqube' version '3.4.0.2513'
  id "com.jfrog.bintray" version "1.8.5" apply false
}

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
}

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }
}

configurations {
  functionalTestImplementation.extendsFrom testImplementation
  functionalTestRuntimeOnly.extendsFrom runtimeOnly

  integrationTestImplementation.extendsFrom testImplementation
  integrationTestRuntimeOnly.extendsFrom runtimeOnly

  smokeTestImplementation.extendsFrom testImplementation
  smokeTestRuntimeOnly.extendsFrom runtimeOnly
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

// https://github.com/gradle/gradle/issues/16791
tasks.withType(JavaExec).configureEach {
  javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

test {
  failFast = true
}

task functional(type: Test) {
  description = "Runs functional tests"
  group = "Verification"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
}

task integration(type: Test) {
  description = "Runs integration tests"
  group = "Verification"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  failFast = true
}

task smoke(type: Test) {
  description = "Runs Smoke Tests"
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
}

checkstyle {
  maxWarnings = 0
  toolVersion = '9.2.1'
  getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

pmd {
  toolVersion = "6.41.0"
  sourceSets = [sourceSets.main, sourceSets.test, sourceSets.functionalTest, sourceSets.integrationTest, sourceSets.smokeTest]
  reportsDir = file("$project.buildDir/reports/pmd")
  // https://github.com/pmd/pmd/issues/876
  ruleSets = []
  ruleSetFiles = files("config/pmd/ruleset.xml")
}

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.required = true
    csv.required = false
    xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport
project.tasks['check'].dependsOn integration

sonarqube {
  properties {
    property "sonar.projectName", "ccd-case-migration-starter"
    property "sonar.projectKey", "ccd-case-migration-starter"
    property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.destination.path}"
    property "sonar.exclusions", "**/processor/*.java"
    property "sonar.coverage.exclusions", "**/processor/*.java"
  }
}

// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = 0
  suppressionFile = 'config/owasp/suppressions.xml'

  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
  skipConfigurations = [
    "checkstyle",
    "compileOnly",
    "pmd",
    "integrationTest",
    "functionalTest",
    "smokeTest",
    "contractTestRuntimeClasspath",
    "contractTestCompileClasspath"
  ]
}

repositories {
  mavenLocal()
  mavenCentral()
  jcenter()
  maven { url 'https://jitpack.io' }
}

ext {
  log4JVersion = "2.17.0"
}

ext['snakeyaml.version'] = '1.31'
ext['spring-security.version'] = '5.7.3'

dependencies {
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'

  implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: '1.6.11'

  implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: '6.0.1'

  implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: log4JVersion
  implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: log4JVersion

  implementation group: 'io.rest-assured', name: 'rest-assured'

  testImplementation(platform('org.junit:junit-bom:5.9.0'))
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
    exclude group: 'junit', module: 'junit'
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }

  implementation project('modules:domain')
  implementation project('modules:processor')
}

mainClassName = 'uk.gov.hmcts.reform.migration.CaseMigrationRunner'

bootJar {
  archiveFileName = "ccd-migration.jar"

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

// Gradle 7.x issue, workaround from: https://github.com/gradle/gradle/issues/17236#issuecomment-894768083
rootProject.tasks.named("processSmokeTestResources") {
  duplicatesStrategy = 'include'
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

subprojects {
  apply plugin: 'java'
  apply plugin: 'maven-publish'
  apply plugin: 'io.spring.dependency-management'
  apply plugin: 'com.jfrog.bintray'

  group = 'uk.gov.hmcts.reform.ccd-case-migration'
  version = '3.0.0'

  sourceCompatibility = '11'
  targetCompatibility = '11'

  compileJava {
    options.compilerArgs << '-parameters' << '-Xlint:deprecation'
  }

  compileTestJava {
    options.compilerArgs << '-Xlint:deprecation'
  }

  repositories {
    mavenLocal()
    mavenCentral()
    jcenter()

    maven { url "https://dl.bintray.com/hmcts/hmcts-maven" }
    maven { url "https://repo.maven.apache.org/maven2" }
  }

  dependencyManagement {
    imports {
      mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
      mavenBom "org.springframework.cloud:spring-cloud-starter-parent:Hoxton.SR10"
    }
  }

  def versions = [
    lombok: '1.18.8'
  ]

  dependencies {
    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok
    compileOnly group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  }

  task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }

  publishing {
    publications {
      maven(MavenPublication) {
        from components.java
        artifact sourcesJar
      }
    }
  }

  bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    publications = ['maven']
    publish = true
    pkg {
      repo = 'hmcts-maven'
      name = 'ccd-case-migration-starter'
      userOrg = 'hmcts'
      licenses = ['MIT']
      vcsUrl = 'https://github.com/hmcts/ccd-case-migration-starter'
      version {
        name = project.version
      }
    }
  }

  afterEvaluate {
    jacocoTestReport {
      reports {
        xml.enabled true
        html.enabled true
      }
    }
  }
  check.dependsOn jacocoTestReport
}
