plugins {
  id 'application'
  id 'checkstyle'
  id 'jacoco'
  id 'java'
  id "io.freefair.lombok" version "6.5.1"
  id 'io.spring.dependency-management' version '1.0.13.RELEASE'
  id 'org.springframework.boot' version '2.7.3'
  id 'org.owasp.dependencycheck' version '6.5.3'
  id 'com.github.kt3k.coveralls' version '2.8.2'
  id 'com.github.ben-manes.versions' version '0.42.0'
  id 'org.sonarqube' version '3.4.0.2513'
  id 'uk.gov.hmcts.java' version '0.12.0'
  id "com.jfrog.bintray" version "1.8.5" apply false
}

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
}

configurations {
  functionalTestImplementation.extendsFrom testImplementation
  functionalTestRuntimeOnly.extendsFrom runtimeOnly

  integrationTestImplementation.extendsFrom testImplementation
  integrationTestRuntimeOnly.extendsFrom runtimeOnly

  smokeTestImplementation.extendsFrom testImplementation
  smokeTestRuntimeOnly.extendsFrom runtimeOnly
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

// https://github.com/gradle/gradle/issues/16791
tasks.withType(JavaExec).configureEach {
  javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

test {
  failFast = true
}

checkstyle {
  maxWarnings = 0
  toolVersion = '9.2.1'
  getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

jacocoTestReport {
  executionData(test)
  reports {
    xml.required = true
    csv.required = false
    xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport

sonarqube {
  properties {
    property "sonar.projectName", "ccd-case-migration-starter"
    property "sonar.projectKey", "ccd-case-migration-starter"
    property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.destination.path}"
  }
}

// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = 0
  suppressionFile = 'config/owasp/suppressions.xml'

  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
  skipConfigurations = [
    "checkstyle",
    "compileOnly",
    "integrationTest",
    "functionalTest",
    "smokeTest",
    "contractTestRuntimeClasspath",
    "contractTestCompileClasspath"
  ]
}

repositories {
  mavenLocal()
  mavenCentral()
  jcenter()
  maven { url 'https://jitpack.io' }
}

ext {
  log4JVersion = "2.17.0"
  restAssuredVersion = '4.3.0!!'
  lombokVersion = "1.18.16"
}

ext['snakeyaml.version'] = '1.31'
ext['spring-security.version'] = '5.7.3'

dependencies {
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'
  implementation group: 'com.fasterxml.jackson.module', name: 'jackson-module-parameter-names'
  implementation group: 'org.springframework', name: 'spring-context-support'
  implementation group: 'uk.gov.hmcts.reform', name: 'idam-client', version: '1.0.2'
  implementation group: 'uk.gov.hmcts.reform', name: 'service-auth-provider-client', version: '3.0.0'
  implementation group: 'uk.gov.hmcts.reform', name: 'core-case-data-store-client', version: '4.7.3'

  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
  testImplementation group: 'com.github.tomakehurst', name: 'wiremock', version: '2.23.2'

  implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: '1.6.11'

  implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: '6.0.1'

  implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: log4JVersion
  implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: log4JVersion
  testImplementation group: 'io.rest-assured', name: 'rest-assured', version: '4.3.0'

  testImplementation(platform('org.junit:junit-bom:5.9.0'))
  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'

  implementation group: 'org.projectlombok', name: 'lombok', version: lombokVersion
  annotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombokVersion
  testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombokVersion
}

dependencyManagement {
  dependencies {
    dependency 'com.google.guava:guava:30.1-jre'

    dependencySet(group: 'commons-beanutils', version: '1.9.4') {
      entry 'commons-beanutils'
    }

    dependencySet(group: 'io.rest-assured', version: '4.3.0') {
      entry 'json-path'
      entry 'xml-path'
    }
    dependencySet(group: 'org.codehaus.groovy', version: '3.0.2') {
      entry 'groovy'
      entry 'groovy-xml'
      entry 'groovy-json'
    }
  }
}

mainClassName = 'uk.gov.hmcts.reform.migration.CaseMigrationRunner'

bootJar {
  archiveFileName = "ccd-migration.jar"

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

subprojects { subproject ->
  version = project.version

  apply plugin: 'org.springframework.boot'
  apply plugin: 'io.spring.dependency-management'
  apply plugin: 'jacoco'
  apply plugin: "com.github.kt3k.coveralls"
  apply plugin: 'uk.gov.hmcts.java'
  apply plugin: 'com.jfrog.bintray'

  configurations {
    providedRuntime

    aatCompile.extendsFrom(testCompile)
    aatRuntime.extendsFrom(testRuntime)
    cucumberRuntime.extendsFrom(functionalRuntime)
  }

  dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
      rules.all { ComponentSelection selection ->
        boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
          selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
        }
        if (rejected) {
          selection.reject('Release candidate')
        }
      }
    }
  }

  // from https://github.com/junit-team/junit5/issues/1024'
  afterEvaluate {
    jacocoTestReport {
      reports {
        // XML required by coveralls and for the below coverage checks
        // and html are generated by default
        xml.enabled true
        html.enabled true
      }

      classDirectories.setFrom((classDirectories.files.collect {
        fileTree(dir: it, exclude: ['uk/gov/hmcts/reform/migration//**',
                                    'uk/gov/hmcts/reform/domain//**'])
      }))

      doLast {
        def report = file("${jacoco.reportsDir}/test/jacocoTestReport.xml")
        logger.lifecycle("Checking coverage results: ${report}")

        def parser = new XmlParser()
        parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
        parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)
        def results = parser.parse(report)

        def percentage = {
          def covered = it.'@covered' as Double
          def missed = it.'@missed' as Double
          ((covered / (covered + missed)) * 100).round(2)
        }

        def counters = results.counter
        def metrics = [:]
        metrics << [
          'class'      : percentage(counters.find { it.'@type'.equals('CLASS') })
        ]


        def failures = []
        metrics.each {
          def limit = limits[it.key]
          if (it.value < limit) {
            failures.add("- ${it.key} coverage rate is: ${it.value}%, minimum is ${limit}%")
          }
        }

        if (failures) {
          logger.quiet("------------------ Code Coverage Failed -----------------------")
          failures.each {
            logger.quiet(it)
          }
          logger.quiet("---------------------------------------------------------------")
          throw new GradleException("Code coverage failed")
        } else{
          logger.quiet("Passed Code Coverage Checks")
        }
      }
    }
  }

  test {
    environment("AZURE_APPLICATIONINSIGHTS_INSTRUMENTATIONKEY", "some-key")
    useJUnitPlatform()

    testLogging {
      events "passed", "skipped", "failed"
    }

    reports {
      html.enabled = true
    }
  }

  check.dependsOn jacocoTestReport
}
